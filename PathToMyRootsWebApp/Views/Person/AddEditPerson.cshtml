@using PathToMyRootsWebApp.Constants
@using PathToMyRootsWebApp.Utils
@using PathToMyRootsWebApp.Models
@model PathToMyRootsWebApp.Models.PersonModel

@{
    ViewData["Title"] = Model?.Id > PathToMyRootsWebAppConstants.UnsetIntValue ? "Edit Person" : "Add Person";
}

<h1>@ViewData["Title"]</h1>

<form asp-action="@((Model?.Id > PathToMyRootsWebAppConstants.UnsetIntValue) ? "EditPerson" : "AddPerson")" method="post" class="form-person">
    @if (Model?.Id > 0)
    {
        <input type="hidden" name="Id" value="@Model.Id" />
    }

    <div class="div-container">
        <div class="div-labels-for-inputs">
            <label for="NobleTitle" class="label-for-input">Noble Title:</label>
            <label for="FirstName" class="label-for-input">First Name:</label>
            <label for="LastName" class="label-for-input">Last Name:</label>
            <label for="MaidenName" class="label-for-input">Maiden Name:</label>
            <label for="OtherNames" class="label-for-input">Other Names:</label>
        </div>
        <div class="div-inputs">
            <input type="text" id="NobleTitle" name="NobleTitle" class="input" value="@Model?.NobleTitle" />
            <input type="text" id="FirstName" name="FirstName" class="input" value="@Model?.FirstName" />
            <input type="text" id="LastName" name="LastName" class="input" value="@Model?.LastName" />
            <input type="text" id="MaidenName" name="MaidenName" class="input" value="@Model?.MaidenName" />
            <input type="text" id="OtherNames" name="OtherNames" class="input" value="@Model?.OtherNames" />
        </div>
    </div>

    <div class="div-borders">
        <div class="div-border">
            <label class="label-border-title">Birth Date:</label>
            <fieldset class="fieldset-radios">
                <label class="label-for-input">
                    <input type="radio" name="input-radio-birth" id="input-radio-birth-date-unknown" class="input-radio"
                    @if (Model?.BirthDate == null || Model?.BirthDate == DateHelper.UnknownServerDate)
                    {
                        @:checked
                    }
                           onclick="toggleBirthDate()" /> Unknown
                </label>
                <label class="label-for-input">
                    <input type="radio" name="input-radio-birth" id="input-radio-birth-date-concrete" class="input-radio"
                    @if (Model?.BirthDate != null && Model.BirthDate != DateHelper.UnknownServerDate)
                    {
                        @:checked
                    }
                           onclick="toggleBirthDate()" /> Date
                </label>

                <input type="text"
                       id="input-birth-date"
                       class="input"
                       placeholder="@DateHelper.InputDateFlatFormat"
                @if (Model?.BirthDate != null && Model.BirthDate != DateHelper.UnknownServerDate)
                {
                    @:value="@DateHelper.ServerDateToInputDate(@Model.BirthDate)"
                } />

                <input type="hidden" id="input-hidden-birth-date" name="BirthDate" value="@DateHelper.ServerDateToInputDate(@Model.BirthDate)" />
            </fieldset>
        </div>

        <div class="div-border">
            <label class="label-border-title">Death Date:</label>
            <fieldset class="fieldset-radios">
                <label class="label-for-input">
                    <input type="radio" name="input-radio-death" id="input-radio-death-date-alive" class="input-radio"
                    @if (Model?.DeathDate == null)
                    {
                        @:checked
                    }
                           onclick="toggleDeathDate()" /> Alive
                </label>
                <label class="label-for-input">
                    <input type="radio" name="input-radio-death" id="input-radio-death-date-unknown" class="input-radio"
                    @if (Model?.DeathDate == DateHelper.UnknownServerDate)
                    {
                        @:checked
                    }
                           onclick="toggleDeathDate()" /> Unknown
                </label>
                <label class="label-for-input">
                    <input type="radio" name="input-radio-death" id="input-radio-death-date-concrete" class="input-radio"
                    @if (Model?.DeathDate != null && Model.DeathDate != DateHelper.UnknownServerDate)
                    {
                        @:checked
                    }
                           onclick="toggleDeathDate()" /> Date
                </label>

                <input type="text"
                       id="input-death-date"
                       class="input"
                       placeholder="@DateHelper.InputDateFlatFormat"
                @if (Model?.DeathDate != null && Model.DeathDate != DateHelper.UnknownServerDate)
                {
                    @:value="@DateHelper.ServerDateToInputDate(@Model.DeathDate)"
                } />

                <input type="hidden" id="input-hidden-death-date" name="DeathDate" value="@DateHelper.ServerDateToInputDate(@Model.DeathDate)" />
            </fieldset>
        </div>
    </div>

    <div class="div-container">
        <div class="div-labels-for-inputs">
            <label for="IsMale" class="label-for-input">Gender:</label>
            <label for="BiologicalFatherId" class="label-for-input">Father:</label>
            <label for="BiologicalMotherId" class="label-for-input">Mother:</label>
            <label for="SpouseId" class="label-for-input">Spouse:</label>
            <label for="ImageUrl" class="label-for-input">Image:</label>
        </div>
        <div class="div-inputs">
            <select id="IsMale" name="IsMale" class="input">
                <option value="true" selected="@(Model?.IsMale == true)">Male</option>
                <option value="false" selected="@(Model?.IsMale == false)">Female</option>
            </select>
            <select id="BiologicalFatherId" name="BiologicalFatherId" class="input">
                <option value="">-- Select Father --</option>
                @foreach (var father in (List<PersonModel>)ViewBag.Fathers)
                {
                    <option value="@father.Id" selected=@(Model?.BiologicalFatherId == father.Id)>
                        @PersonModelFormatter.ToShortFullInfo(father)
                    </option>
                }
            </select>
            <select id="BiologicalMotherId" name="BiologicalMotherId" class="input">
                <option value="">-- Select Mother --</option>
                @foreach (var mother in (List<PersonModel>)ViewBag.Mothers)
                {
                    <option value="@mother.Id" selected=@(Model?.BiologicalMotherId == mother.Id)>
                        @PersonModelFormatter.ToShortFullInfo(mother)
                    </option>
                }
            </select>
            <select id="SpouseId" name="SpouseId" class="input">
                <option value="">-- Select Spouse --</option>
                @foreach (var spouse in (List<PersonModel>)ViewBag.Spouses)
                {
                    <option value="@spouse.Id" selected=@(Model?.SpouseId == spouse.Id)>
                        @PersonModelFormatter.ToShortFullInfo(spouse)
                    </option>
                }
            </select>
            <input type="file" id="input-image-url" accept="image/*" style="display: none"/>
            <button id="button-upload-image">Select Image</button>
            <input type="hidden" id="input-hidden-image-url" name="ImageUrl" value="@Model?.ImageUrl" />
        </div>
    </div>

    <div id="div-preview-image" style="position: relative; max-width: 200px;">
        <img id="img-preview-image" style="max-width: 100%;" />
        <button id="button-remove-image" style="position: absolute; top: 5px; right: 5px;">X</button>
    </div>

    <div id="div-cropper-overlay" style="display: none;">
        <div id="div-cropper-container">
            <img id="img-image-to-crop" src="" alt="Image to Crop" />
            <button id="button-crop-confirm">Confirm Crop</button>
        </div>
    </div>

    <div class="div-button">
        @if (Model?.Id == PathToMyRootsWebAppConstants.UnsetIntValue)
        {
            <button type="submit" class="button">Add</button>
        }
        else
        {
            <button type="submit" class="button">Update</button>
        }
    </div>
</form>

@section Styles {
    <link rel="stylesheet" href="~/css/add-edit-person.css" />
    <link rel="stylesheet" href="~/css/libs/cropper.css" />
}
@section Scripts {
    <script>
        const DateInputPattern = '@Html.Raw(DateHelper.InputDateValidationPattern)';
        const UnknownInputDate = '@Html.Raw(DateHelper.UnknownInputDate)';
        const DateInputFlatFormat = '@Html.Raw(DateHelper.InputDateFlatFormat)';
    </script>

    <script src="~/js/libs/cropper.js"></script>
    <script src="~/js/add-edit-person.js"></script>
}
// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathToMyRootsDataAccess.Models;

#nullable disable

namespace PathToMyRootsDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250202215736_AddAdoptiveParentsToModels")]
    partial class AddAdoptiveParentsToModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PathToMyRootsDataAccess.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdoptiveFatherId")
                        .HasColumnType("int");

                    b.Property<int?>("AdoptiveMotherId")
                        .HasColumnType("int");

                    b.Property<int?>("BiologicalFatherId")
                        .HasColumnType("int")
                        .HasColumnName("BiologicalFatherID");

                    b.Property<int?>("BiologicalMotherId")
                        .HasColumnType("int")
                        .HasColumnName("BiologicalMotherID");

                    b.Property<string>("BirthDate")
                        .HasColumnType("CHAR(9)")
                        .HasColumnName("BirthDate");

                    b.Property<string>("DeathDate")
                        .HasColumnType("CHAR(9)")
                        .HasColumnName("DeathDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MarriageDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NobleTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("SpouseId")
                        .HasColumnType("int")
                        .HasColumnName("SpouseID");

                    b.HasKey("Id")
                        .HasName("PK__Persons__3214EC274F69D53F");

                    b.HasIndex("AdoptiveFatherId");

                    b.HasIndex("AdoptiveMotherId");

                    b.HasIndex("BiologicalFatherId");

                    b.HasIndex("BiologicalMotherId");

                    b.HasIndex("SpouseId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("PathToMyRootsDataAccess.Models.Person", b =>
                {
                    b.HasOne("PathToMyRootsDataAccess.Models.Person", "AdoptiveFather")
                        .WithMany("InverseAdoptiveFather")
                        .HasForeignKey("AdoptiveFatherId")
                        .HasConstraintName("FK__Persons__Adoptiv__2F10007E");

                    b.HasOne("PathToMyRootsDataAccess.Models.Person", "AdoptiveMother")
                        .WithMany("InverseAdoptiveMother")
                        .HasForeignKey("AdoptiveMotherId")
                        .HasConstraintName("FK__Persons__Adoptiv__2E3D1A6B");

                    b.HasOne("PathToMyRootsDataAccess.Models.Person", "BiologicalFather")
                        .WithMany("InverseBiologicalFather")
                        .HasForeignKey("BiologicalFatherId")
                        .HasConstraintName("FK__Persons__Biologi__25869641");

                    b.HasOne("PathToMyRootsDataAccess.Models.Person", "BiologicalMother")
                        .WithMany("InverseBiologicalMother")
                        .HasForeignKey("BiologicalMotherId")
                        .HasConstraintName("FK__Persons__Biologi__24927208");

                    b.HasOne("PathToMyRootsDataAccess.Models.Person", "Spouse")
                        .WithMany("InverseSpouse")
                        .HasForeignKey("SpouseId")
                        .HasConstraintName("FK__Persons__SpouseI__267ABA7A");

                    b.Navigation("AdoptiveFather");

                    b.Navigation("AdoptiveMother");

                    b.Navigation("BiologicalFather");

                    b.Navigation("BiologicalMother");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("PathToMyRootsDataAccess.Models.Person", b =>
                {
                    b.Navigation("InverseAdoptiveFather");

                    b.Navigation("InverseAdoptiveMother");

                    b.Navigation("InverseBiologicalFather");

                    b.Navigation("InverseBiologicalMother");

                    b.Navigation("InverseSpouse");
                });
#pragma warning restore 612, 618
        }
    }
}
